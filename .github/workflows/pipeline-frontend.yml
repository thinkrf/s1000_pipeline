name: S1000 Web Application Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'The s1000 frontend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      appEnv:
        description: 'App Environment: options (test, prod)'     
        required: True        

jobs:
  build-and-push-image:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Print Release Version
      run: |
        echo "Release ${{ github.event.inputs.releaseTag }}"
        echo "Environment ${{ github.event.inputs.appEnv }}" 

    - name: Parse App Name
      run: |  
        # Defaul values
        echo "APP_PORT=3000" >> $GITHUB_ENV;
        echo "AWS_KEY=${{ secrets.AWS_EC2_SSH_PRIVATE_KEY_DEV }}" >> $GITHUB_ENV;
        echo "AWS_KNOWN_HOSTS=${{ secrets.KNOWN_HOSTS_AWS_EC2_DEV }}" >> $GITHUB_ENV;
        echo "AWS_HOST=${{ vars.AWS_EC2_HOST_DEV }}" >> $GITHUB_ENV;
        
        if [ ${{ github.event.inputs.appEnv }} == "dev" ]; then 
          echo "APP_PORT=3000" >> $GITHUB_ENV; 
          echo "AWS_KEY=${{ secrets.AWS_EC2_SSH_PRIVATE_KEY_DEV }}" >> $GITHUB_ENV;
          echo "AWS_KNOWN_HOSTS=${{ secrets.KNOWN_HOSTS_AWS_EC2_DEV }}" >> $GITHUB_ENV;
          echo "AWS_HOST=${{ vars.AWS_EC2_HOST_DEV }}" >> $GITHUB_ENV;          
        fi 
        if [ ${{ github.event.inputs.appEnv }} == "test" ]; then 
          echo "APP_PORT=3001" >> $GITHUB_ENV; 
          echo "AWS_KEY=${{ secrets.AWS_EC2_SSH_PRIVATE_KEY_TEST }}" >> $GITHUB_ENV;
          echo "AWS_KNOWN_HOSTS=${{ secrets.KNOWN_HOSTS_AWS_EC2_TEST }}" >> $GITHUB_ENV;
          echo "AWS_HOST=${{ vars.AWS_EC2_HOST_TEST }}" >> $GITHUB_ENV;           
        fi  
        if [ ${{ github.event.inputs.appEnv }} == "prod" ]; then 
          echo "APP_PORT=3001" >> $GITHUB_ENV; 
          echo "AWS_KEY=A }}" >> $GITHUB_ENV;
          echo "AWS_KNOWN_HOSTS=B" >> $GITHUB_ENV;
          echo "AWS_HOST=C" >> $GITHUB_ENV;            
        fi        
        echo "AWS_KEY: ${{ env.AWS_KEY }}"
        echo "AWS_KNOWN_HOSTS: ${{ env.AWS_KNOWN_HOSTS }}"
        echo "AWS_HOST: ${{ env.AWS_HOST }}"

    # - name: Install Bitbuket SSH key
    #   uses: shimataro/ssh-key-action@v2
    #   with:
    #     key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
    #     name: id_rsa_bit
    #     known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
    #     config: |
    #       Host bitbucket-git
    #         HostName bitbucket.org
    #         IdentityFile ~/.ssh/id_rsa_bit
    #     if_key_exists: replace

    # - name: Install AWS EC2 SSH key
    #   uses: shimataro/ssh-key-action@v2
    #   with:
    #     key: ${{ env.AWS_KEY }}
    #     name: id_rsa_aws_ec2
    #     known_hosts: ${{ env.AWS_KNOWN_HOSTS }}
    #     config: |
    #       Host aws-ec2
    #         HostName ${{ env.AWS_HOST }}
    #         IdentityFile ~/.ssh/id_rsa_aws_ec2
    #     if_key_exists: replace

    # - name: Retrieve Repository
    #   run: |
    #     git clone git@bitbucket-git:thinkrfsoftware/s1000_frontend.git
    #     cd s1000_frontend
    #     git checkout ${{ github.event.inputs.releaseTag }}

    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v1

    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v1

    # - name: Log in to the Container registry
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    
    # - name: Build and push Docker image
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: s1000_frontend/
    #     push: true
    #     tags: thinkrf/s1000_frontend:${{ github.event.inputs.releaseTag }}

    # - name: Deploy
    #   run: |
    #     echo "echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} > ~/docker_token.txt; cat ~/docker_token.txt | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin; rm -f ~/docker_token.txt; docker system prune --all --force; sleep 3; sudo systemctl stop docker; sleep 3; sudo systemctl start docker; sleep 3; docker pull thinkrf/s1000_frontend:${{ github.event.inputs.releaseTag }}; sleep 3; docker rm -f s1000_${{ github.event.inputs.appEnv }}-${{ github.event.inputs.releaseTag }}; docker run --name s1000_${{ github.event.inputs.appEnv }}-${{ github.event.inputs.releaseTag }} -d -p ${{ env.APP_PORT }}:3000 thinkrf/s1000_frontend:${{ github.event.inputs.releaseTag }}" | ssh ubuntu@aws-ec2 /bin/bash

    #===============================================================
    # echo "echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} > ~/docker_token.txt; cat ~/docker_token.txt | docker login --username ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin; rm -f ~/docker_token.txt; docker stop $(docker ps -aq); sleep 5; docker rm $(docker ps -aq); sleep 5; sudo systemctl stop docker; sleep 5; sudo systemctl start docker; sleep 5; docker pull thinkrf/s1000_frontend:${{ github.event.inputs.releaseTag }}; sleep 3; docker run --name s1000_${{ github.event.inputs.appEnv }}-${{ github.event.inputs.releaseTag }} -d -p ${{ env.APP_PORT }}:3000 thinkrf/s1000_frontend:${{ github.event.inputs.releaseTag }}" | ssh ubuntu@aws-ec2 /bin/bash

    # - name: Deploy to AWS Elastic Beanstalk
    #   uses: einaregilsson/beanstalk-deploy@v21
    #   with:
    #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     application_name: ${{ env.APP_NAME }}
    #     environment_name: ${{ env.APP_NAME }}-env
    #     version_label: ${{ github.event.inputs.releaseTag }}
    #     region: us-east-2
    #     deployment_package: s1000_frontend/s1000-${{ github.event.inputs.appEnv }}.zip    