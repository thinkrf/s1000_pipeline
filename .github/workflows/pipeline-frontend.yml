name: S1000 Frontend Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'The s1000 frontend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      appEnv:
        description: 'App Environment: options (test)'     
        required: True        

jobs:
  build-and-push-image:

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
        name: id_rsa_bit
        known_hosts: ${{ secrets.KNOWN_HOSTS }}
        config: |
          Host bitbucket-git
            HostName bitbucket.org
            IdentityFile ~/.ssh/id_rsa_bit
        if_key_exists: replace

    - name: Retrieve Repository
      run: |
        git clone git@bitbucket-git:thinkrfsoftware/s1000_frontend.git
        cd s1000_frontend
        git checkout ${{ github.event.inputs.releaseTag }}
    
    - name: Generate deployment package
      run: |
        ls -l
    #     zip -r deploy.zip . -x '*.git*'

    # - name: Deploy to AWS Elastic Beanstalk
    #   uses: einaregilsson/beanstalk-deploy@v21
    #   with:
    #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     application_name: s1000-${{ github.event.inputs.appEnv }}
    #     environment_name: s1000-${{ github.event.inputs.appEnv }}
    #     version_label: ${{ github.event.inputs.releaseTag }}
    #     region: us-east-2
    #     deployment_package: deploy.zip    
    # # Runs commands using the runners shell
    # - name: Run the build script
    #   run: |
    #     cd trf_sa_node/control_agent
    #     ./build.sh ${{ github.event.inputs.libtrfSAReleaseTag }} ${{ github.event.inputs.caReleaseTag }}
    # - name: Set up QEMU
    #   uses: docker/setup-qemu-action@v1

    # # Setup Docker buld action
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v1

    # # Setup Docker Hub Login
    # - name: Log in to the Container registry
    #   uses: docker/login-action@v1
    #   with:
    #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    

    # # Build and Push the Image
    # - name: Build and push Docker image
    #   id: docker_build
    #   uses: docker/build-push-action@v2
    #   with:
    #     # working-directory: ./trf_sa_node/control_agent/
    #     arch: aarch64
    #     context: trf_sa_node/control_agent/
    #     push: true
    #     tags: thinkrf/node_control_agent:${{ env.BUILD_ID }}

    # # Create Signal Application Release
    # - name: Create Signal Application Release
    #   uses: fjogeleit/http-request-action@v1
    #   with:
    #     timeout: 15000
    #     preventFailureOnNoResponse: 'true'
    #     url: 'https://api-external.prod.edgesignal.io/accounts/${{ secrets.SIGNAL_ACCOUNT_ID }}/applications/${{ env.SIGNAL_APP_ID }}/releases'
    #     method: 'POST'
    #     customHeaders: '{"Content-Type": "application/json",
    #                     "X-Authorization": "${{ secrets.SIGNAL_ACCOUNT_TOKEN }}" }'
    #     data:   '{
    #               "localVersion": "${{ env.BUILD_ID }}",
    #               "repository": {
    #                   "repositoryAddress": "thinkrf/node_control_agent",
    #                   "isPrivate": true,
    #                   "imageTag": "${{ env.BUILD_ID }}",
    #                   "registry": {
    #                       "passwordToken": "${{ secrets.SIGNAL_REGISTRY_SECRET }}",
    #                       "address": "https://index.docker.io/v1/",
    #                       "username": "${{ secrets.SIGNAL_REGISTRY_USER }}"
    #                   }
    #               },
    #               "dockerRunFlags": "--init --ulimit core=-1 --mount type=bind,source=/tmp/,target=/tmp/ --pid host -v /home/NodeConfig:/home/NodeConfig -v /home/NodeData:/home/NodeData -v /usr/local/bin/rtsapower:/usr/local/bin/rtsapower  -v /usr/local/bin/pinctl:/usr/local/bin/pinctl  -v /var/log/sxm/rtsapower.log:/var/log/sxm/rtsapower.log -v /usr/local/bin/fleetstart:/usr/local/bin/fleetstart -v /usr/local/bin/GreengrassInstaller:/usr/local/bin/GreengrassInstaller -v /etc/edgesignal:/etc/edgesignal -v /greengrass/v2:/greengrass/v2 -v /usr/local/bin/discover:/usr/local/bin/discover -e AWS_IOT_THING_NAME -e AWS_GG_NUCLEUS_DOMAIN_SOCKET_FILEPATH_FOR_COMPONENT -e SVCUID --network host "                  
    #           }'