name: S1000 Agent Installer Package Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'The s1000 backend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      appEnv:
        description: 'App Environment: options (test)'     
        required: True  

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019"
          }
        # - {
        #     name: "Ubuntu_Latest_GCC",
        #     os: ubuntu-latest,
        #     artifact: "ubuntu_gcc.7z",
        #     build_type: "Release",
        #     cc: "gcc",
        #     cxx: "g++",
        #     archiver: "7z a",
        #     generators: "Ninja"
        #   }          

    steps:       

    # - name: Install dependencies on ubuntu
    #   if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install ninja-build cmake
    #     ninja --version
    #     cmake --version
    #     gcc --version

    - name: Install Bitbuket SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
        name: id_rsa_bit
        known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
        config: |
          Host bitbucket-git
            HostName bitbucket.org
            IdentityFile ~/.ssh/id_rsa_bit
        if_key_exists: replace

    # - name: Inno-setup
    #   shell: pwsh
    #   run: |
    #     Invoke-WebRequest -OutFile inno.exe -Uri https://jrsoftware.org/download.php/is.exe
    #     Start-Process -Wait -FilePath $PWD\inno.exe -Argument "/silent" -PassThru

    # - name: Install boost
    #   run: |
    #     Invoke-WebRequest -OutFile boost.exe -Uri https://sourceforge.net/projects/boost/files/boost-binaries/1.80.0/boost_1_80_0-msvc-14.1-32.exe/download
    #     Start-Process -Wait -FilePath $PWD\boost.exe -Argument "/silent" -PassThru

    # - name: Install boost
    #   uses: MarkusJx/install-boost@v2.4.1
    #   id: install-boost
    #   with:
    #       # REQUIRED: Specify the required boost version
    #       # A list of supported versions can be found here:
    #       # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
    #       boost_version: 1.80.0
    #       # OPTIONAL: Specify a custon install location
    #       # boost_install_dir: C:\boost
    #       # OPTIONAL: Specify a platform version
    #       platform_version: 2019
    #       # OPTIONAL: Specify a toolset
    #       toolset: msvc
    #       cache: true
    - name: Cache Boost
      uses: actions/cache@v2
      with:
        path: '${{ runner.workspace }}/boost_*.tar.gz'
        key: 'boost-1.80.0'

    - name: Build Boost
      id: boost
      uses: egor-tensin/build-boost@v1
      with:
        version: 1.80.0
        libraries: filesystem program_options system
        platform: x64
        configuration: Release
        static-runtime: 1
        static: 1

    - name: Show paths
      run: |
        printf 'Boost has been unpacked to: %s\n' '${{ steps.boost.outputs.root }}'
        printf 'Libraries can be found here: %s\n' '${{ steps.boost.outputs.librarydir }}'
      shell: bash

    # - name: Test
    #   run: dir ${{ steps.install-boost.outputs.BOOST_ROOT }}/boost/range/algorithm

    # - name: Install Node.js and NPM
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: 14

    - name: Retrieve Repository
      run: |
        git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
        cd s1000_backend
        git checkout ${{ github.event.inputs.releaseTag }}

    - name: Build Client
      shell: pwsh
      run: |
        cd s1000_backend
        cmake -D "BOOST_ROOT=${{ steps.boost.outputs.root }}" -D "BOOST_LIBRARYDIR=${{ steps.boost.outputs.librarydir }}" .
        CMAKE --build .
        dir bin/
      env:
          BOOST_ROOT: D:\a\s1000_pipeline\s1000_pipeline\boost\boost                       

    # - name: Build Socket Server
    #   shell: pwsh
    #   run: |
    #     cd s1000_backend/server
    #     npm install
    #     npx electron-packager . --overwrite --arch x64 --platform win32
      # env:
      #     BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}     



    # - name: Configure CMake
    #   run: cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B build
    #   env:
    #       BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    # - name: Boost Library
    #   shell: pwsh
    #   run: |
    #     Invoke-WebRequest -OutFile boost.zip -Uri https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip
    #     7z x boost.zip -oboost
    #     cd boost/boost_1_80_0
    #     .\bootstrap.bat
    #     .\b2         