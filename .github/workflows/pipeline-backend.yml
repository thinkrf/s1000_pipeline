name: S1000 Agent Installer Package Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'The s1000 backend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      versionNumber:
        description: 'The version number to package the backend as. (This is likely the same as the tag)'
        required: true
      ChangelogComment:
        description: 'A sentence or short paragraph describing the important changes since last packaging'
        required: true

jobs:
  windows_build:
    name: "Windows Latest"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      
      
    steps:       

    - name: Install Bitbucket SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
        name: id_rsa_bit
        known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
        config: |
          Host bitbucket-git
            HostName bitbucket.org
            IdentityFile ~/.ssh/id_rsa_bit
        if_key_exists: replace


    - name: Inno-setup
      shell: pwsh
      run: |
        Invoke-WebRequest -OutFile inno.exe -Uri https://jrsoftware.org/download.php/is.exe
        Start-Process -Wait -FilePath $PWD\inno.exe -Argument "/silent" -PassThru


    - name: Retrieve Backend Repository
      run: |
        git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
        cd s1000_backend
        git checkout ${{ github.event.inputs.releaseTag }}
        cd ..
      
      
    - name: Retrieve Installer Repository
      run: |
        git clone git@bitbucket-git:thinkrfsoftware/s1000-installer.git      
    
      
      # The first line of this job may not be needed, but it is included nonetheless for safekeeping
    - name: Get 7-Zip
      run: |
        Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        choco install 7zip
        
        #Invoke-WebRequest -OutFile 7zip.exe -Uri https://www.7-zip.org/a/7z1900-x64.msi
        #Start-Process 7zip.exe -Wait -ArgumentList "/i $out /quiet"
      
      
    - name: Get VS Code
      run: | 
        choco install visualstudio2022buildtools --package-parameters "--includeRecommended"
        choco install vscode

    
      # This step is the one that will take the longest, but it is nessecary to do it this way because of the peculiar configuration of CMakeLists for windows
    - name: Get Boost
      run: |
       Invoke-WebRequest -OutFile boost.zip -Uri https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip
       7z x boost.zip -o"C:\Program Files\boost\boost_1_80_0"
       "C:\Program Files\boost\boost_1_80_0\boost_1_80_0\bootstrap.bat"
       "C:\Program Files\boost\boost_1_80_0\boost_1_80_0\b2"
        
    
    
    - name: Get WebsocketPP
      run: |
        cd s1000_backend\include
        git clone https://github.com/zaphoyd/websocketpp.git
        cd websocketpp
        mkdir build && cd build
        cmake .. -DCMAKE_INSTALL_PREFIX="C:/Program Files/websocketpp"
        cmake --build . --target install --config Release
        cd ..\..\..\..
        
      
    - name: Call Package Builder
      run: |
        cd s1000-installer
        python installer-builder.py ../s1000_backend $versionNumber $changelogComment


      # Uploads built windows installer as an artifact
    - name: Upload Built Installer
      uses: actions/upload-artifact@v3
      with:
        name: S1000_Agent_${{ github.event.inputs.releaseTag }}_Installer
        path: windows\S1000_Agent_*        




  ubuntu_build:
    name: "Ubuntu Build"
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      
    steps:
    
      - name: Install dependencies on ubuntu
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake libwebsocketpp-dev python3.11 gcc dpkg
          ninja --version
          cmake --version
          gcc --version


      - name: Install Bitbucket SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
          name: id_rsa_bit
          known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
          config: |
            Host bitbucket-git
              HostName bitbucket.org
              IdentityFile ~/.ssh/id_rsa_bit
          if_key_exists: replace
          
      - name: Retrieve Backend Repository
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
          cd s1000_backend
          git checkout ${{ github.event.inputs.releaseTag }}
          cd ..
      
      
      - name: Retrieve Installer Repository
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000-installer.git      
    
      - name: Call Builder
        run: |
          cd s1000-installer
          sudo python3.11 installer-builder.py ../s1000_backend $versionNumber $changelogComment

      - name: Upload Built Installer
        uses: actions/upload-artifact@v3
        with:
          name: S1000_Agent_${{ github.event.inputs.releaseTag }}_Installer
          path: linux/Debian/s1000-agent*.deb  



