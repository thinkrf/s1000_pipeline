name: S1000 Agent Installer Package Pipeline

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      releaseTag:
        description: 'The s1000 backend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      versionNumber:
        description: 'The version number to package the backend as. (This is likely the same as the tag)'
        required: true
      ChangelogComment:
        description: 'A sentence or short paragraph describing the important changes since last packaging'
        required: true

jobs:
  build:
    name: "Windows Latest"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # This line is where builds for linux can also be called to carry out. More work will need to be done in implementing this
        os: ["windows-latest"]
      
      
      #   artifact: "windows_msvc.7z"
      #   build_type: "Release"
      #   cc: "cl"
      #   cxx: "cl"
          # Visual Studio 2019 is specifically needed in order to build, as the location (and sometimes name) of this vital file changes between versions
      #   environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/*/VC/Auxiliary/Build/vcvars64.bat"
      #   archiver: "7z a"
      #   generators: "Visual Studio 16 2019"
      
      # 
      #     artifact: "ubuntu_gcc.7z"
      #     build_type: "Release"
      #     cc: "gcc"
      #     cxx: "g++"
      #     archiver: "7z a"
      #     generators: "Ninja"
      #             

    steps:       

    # - name: Install dependencies on ubuntu
    #   if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install ninja-build cmake libwebsocketpp-dev python
    #     ninja --version
    #     cmake --version
    #     gcc --version


    - name: Install Bitbuket SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
        name: id_rsa_bit
        known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
        config: |
          Host bitbucket-git
            HostName bitbucket.org
            IdentityFile ~/.ssh/id_rsa_bit
        if_key_exists: replace


    - name: Inno-setup
      shell: pwsh
      run: |
        Invoke-WebRequest -OutFile inno.exe -Uri https://jrsoftware.org/download.php/is.exe
        Start-Process -Wait -FilePath $PWD\inno.exe -Argument "/silent" -PassThru


    # - name: Install boost
    #   uses: MarkusJx/install-boost@v2.4.1
    #   id: install-boost
    #   with:
    #       # REQUIRED: Specify the required boost version
    #       # A list of supported versions can be found here:
    #       # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
    #       boost_version: 1.80.0
    #       # OPTIONAL: Specify a custon install location
    #       # boost_install_dir: C:\boost
    #       # OPTIONAL: Specify a platform version
    #       platform_version: 2019
    #       # OPTIONAL: Specify a toolset
    #       toolset: msvc
    #       cache: true



    - name: Retrieve Backend Repository
      run: |
        git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
        cd s1000_backend
        git checkout ${{ github.event.inputs.releaseTag }}
        cd ..
      
      
    - name: Retrieve Installer Repository
      run: |
        git clone git@bitbucket.org:thinkrfsoftware/s1000-installer.git      
    
    
    - name: Get 7-Zip
      run: |
        Invoke-WebRequest -OutFile 7zipper.exe -Uri https://www.7-zip.org/a/7z1900-x64.msi
        Start-Process 7zipper.exe -Wait -ArgumentList "/i $out /quiet"

    
    - name: Get Boost
      run: |
       Invoke-WebRequest -OutFile boost.zip -Uri https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip
       7z x boost.zip -o"C:\Program Files\boost"
       cd "C:\Program Files\boost\boost_1_80_0"
       .\bootstrap.bat
       .\b2
       cd ../..
        
    
    
    - name: Get WebsocketPP
      run: |
        git clone https://github.com/zaphoyd/websocketpp.git
        cd websocketpp
        mkdir build && cd build
        cmake .. -DCMAKE_INSTALL_PREFIX="C:/Program Files/websocketpp"
        cmake --build . --target install --config Release
        cd ..\..
        
        
    - name: Call Package Builder
      run: |
        cd s1000-installer
        python installer-builder.py ../s1000_backend $versionNumber $changelogComment


    # - name: Configure CMake
    #   run: cmake . -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B build
    #   env:
    #       BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    # - name: Boost Library
    #   shell: pwsh
    #   run: |
    #     Invoke-WebRequest -OutFile boost.zip -Uri https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip
    #     7z x boost.zip -oboost
    #     cd boost/boost_1_80_0
    #     .\bootstrap.bat
    #     .\b2         
