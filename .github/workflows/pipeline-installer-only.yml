name: S1000  Application Pipeline

on:
  workflow_dispatch:
    inputs:        
      InstallerType: 
        type: choice
        description: 'The standalone mode creates an electron frontend execulatable and backend agent. The web mode, creates a backend agent only which launches a web browser'     
        options: 
            - web
            - standalone
      FrontendReleaseTag:
        description: 'The S1000 frontend tag that you would like to create a release. Ex: 1.3.0'     
        required: true  
      BackendReleaseTag:
        description: 'The S1000 backend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      ChangelogComment:
        description: 'A sentence or short paragraph describing the important changes since the last packaging'
        required: true
      Stability:
        type: choice
        description: 'The stability of the built version (based on the amount of testing)'
        options:
          - unstable
          - testing
          - stable
          
env:
  QT_VERSION: '6.5.2'

jobs:
  build-and-push-image:
    runs-on: windows-latest
    
    permissions:
      contents: read
      packages: write
    steps:
      - name: Print Release Version
        run: |
          echo "Backend Release ${{ github.event.inputs.BackendReleaseTag }}"
          echo "Frontend Release ${{ github.event.inputs.FrontendReleaseTag }}"
    

      - name: Install Bitbucket SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
          name: id_rsa_bit
          known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
          config: |
            Host bitbucket-git
              HostName bitbucket.org
              IdentityFile ~/.ssh/id_rsa_bit
          if_key_exists: replace

      - name: Inno-setup
        shell: pwsh
        run: |
          Invoke-WebRequest -OutFile inno.exe -Uri https://jrsoftware.org/download.php/is.exe
          Start-Process -Wait -FilePath $PWD\inno.exe -Argument "/silent" -PassThru
      
      - name: Check Inno Setup Compiler Installation
        run: |
          $isccPaths = @(
            "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
            "C:\Program Files\Inno Setup 6\ISCC.exe"
          )
          foreach ($path in $isccPaths) {
            if (Test-Path $path) {
              Write-Host "Inno Setup Compiler is installed at $path"
              break
            }
          }
          if (-Not $path) {
            Write-Host "Inno Setup Compiler is not found in the expected locations. Please check the installation."
          }
   
          
      - name: Retrieve Frontend Repository 
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000_frontend.git
          cd s1000_frontend
          git checkout ${{ github.event.inputs.FrontendReleaseTag }}          
            

      - name: Retrieve Backend Repository and build
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
          cd s1000_backend
          git checkout ${{ github.event.inputs.BackendReleaseTag }}

      - name: Retrieve Installer Repository and run installer
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/installer.git
          dir
          if ($env:INPUT_InstallerType -eq "standalone") {
            cd installer/packaging/standalone
            $output_directory = & $path /q installer/packaging/windows/standalone/inno-setup.iss
          }
          elseif ($env:INPUT_InstallerType -eq "web") {
            cd installer/packaging/web
            $output_directory = & $path /q installer/packaging/windows/web/inno-setup.iss
          }
          else
          {
            exit 1
          }
          cd installer/packaging/windows/web
          dir 

          $env:OUTPUT_DIRECTORY = $output_directory

        # Uploads built windows installer as an artifact
      - name: Upload Installer
        uses: actions/upload-artifact@v2
        with:
          name: windows-installer-artifact
           $myOutputDirectory = $env:OUTPUT_DIRECTORY
           cd $OUTPUT_DIRECTORY/
           dir
           cd  $OUTPUT_DIRECTORY/Output/
           dir
          path: $OUTPUT_DIRECTORY/Output/*