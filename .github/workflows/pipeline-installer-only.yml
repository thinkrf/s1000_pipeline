  name: S1000 Installer Only Application Pipeline

  on:
    workflow_dispatch:
      inputs:        
        InstallerType: 
          type: choice
          description: 'The standalone mode creates an electron frontend execulatable and backend agent. The web mode, creates a backend agent only which launches a web browser'     
          options: 
              - "web"
              - "standalone"
        FrontendReleaseTag:
          description: 'The S1000 frontend tag that you would like to create a release. Ex: 1.3.0'     
          required: true  
        BackendReleaseTag:
          description: 'The S1000 backend tag that you would like to create a release. Ex: 1.3.0'     
          required: true    
        LibtrfReleaseTag:
          description: 'The S1000 libtrf tag that you would like to create a release. Ex: 1.3.0'     
          required: true   
        ChangelogComment:
          description: 'A sentence or short paragraph describing the important changes since the last packaging'
          required: true
        Stability:
          type: choice
          description: 'The stability of the built version (based on the amount of testing)'
          options:
            - unstable
            - testing
            - stable
        Version:
          description: 'Beta Version / Release'
          required: false
          default: 'Release'  # Provide a default value if not specified
            
  env:
    QT_VERSION: '6.5.2'

  jobs:
    build-and-push-image:
      runs-on: windows-latest
      
      permissions:
        contents: read
        packages: write
      steps:
        - name: Print Release Version
          run: |
            echo "Backend Release ${{ github.event.inputs.BackendReleaseTag }}"
            echo "Frontend Release ${{ github.event.inputs.FrontendReleaseTag }}"
            echo "Libtrf Release ${{ github.event.inputs.LibtrfReleaseTag }}"


        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.x

        - name: Install required Python packages
          run: pip install pyyaml

        - name: Install Bitbucket SSH key
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
            name: id_rsa_bit
            known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
            config: |
              Host bitbucket-git
                HostName bitbucket.org
                IdentityFile ~/.ssh/id_rsa_bit
            if_key_exists: replace

            
        - name: Retrieve Frontend Repository 
          run: |
            git clone git@bitbucket-git:thinkrfsoftware/s1000_frontend.git
            cd s1000_frontend
            git checkout dev_kelly_nextron
            npm ci
            npm run build-win64          
              

        - name: Retrieve Backend Repository and build
          run: |
            git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
            cd s1000_backend
            git checkout ${{ github.event.inputs.BackendReleaseTag }}



        - name: Retrieve libtrf Repository and build
          run: |
            git clone git@bitbucket.org:thinkrfsoftware/libtrf.git
            cd libtrf
            git checkout ${{ github.event.inputs.LibtrfReleaseTag }}
            cp bin/x64/libtrf.dll ../s1000_backend/bin/x64/Release
            cp bin/x64/libtrf.lib ../s1000_backend/bin/x64/Release
            cp bin/x64/libtrf.dll ../s1000_backend/include
            cp bin/x64/libtrf.lib ../s1000_backend/include


      - name: Retrieve Installer Repository & Update Inno Setup script
        run: |

            $TAG_VERSION = ${{ github.event.inputs.BackendReleaseTag }}
            $BETA_VERSION = ${{ github.event.inputs.Version }}

            git clone git@bitbucket-git:thinkrfsoftware/installer.git
            dir
            if ($env:INPUT_InstallerType -eq "standalone") 
            {
              cd installer/packaging/standalone
            }
            elseif ($env:INPUT_InstallerType -eq "web") 
            {
              cd installer/packaging/web
            }
            else
            {
              echo $env:INPUT_InstallerType
              exit 1
            }
            Write-Output "TAG_VERSION=$TAG_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            Write-Output "BETA_VERSION=$BETA_VERSION" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            $INNO_SCRIPT = Get-Content -Path .\inno-setup.iss
            $INNO_SCRIPT = $INNO_SCRIPT -replace "{#TagVersion}_{#BetaVersion}", "${TAG_VERSION}_${BETA_VERSION}"
            $INNO_SCRIPT | Out-File -FilePath .\inno-setup.iss -Encoding utf8

      - name: Download Inno Setup Compiler
        run: Invoke-WebRequest -Uri "http://www.jrsoftware.org/download.php/is.exe" -OutFile ".\is.exe"

      - name: Install Inno Setup Compiler
        run: Start-Process -FilePath .\is.exe -ArgumentList "/SP- /VERYSILENT /DIR=C:\InnoSetup" -Wait

      - name: Compile Inno Setup script
        run: "C:\InnoSetup\ISCC.exe" .\inno-setup.iss

      - name: Upload Installer Artifact
            uses: actions/upload-artifact@v2
            with:
              name: installer
              path: .











            