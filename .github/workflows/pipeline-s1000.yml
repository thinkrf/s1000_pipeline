name: S1000  Application Pipeline

on:
  workflow_dispatch:
    inputs:        
      InstallerType: 
        description: 'The standalone mode creates an electron frontend execulatable and backend agent. The web mode, creates a backend agent only which launches a web browser'     
        required: true
        options: 
          - web
          - standalone
      FrontendReleaseTag:
        description: 'The S1000 frontend tag that you would like to create a release. Ex: 1.3.0'     
        required: true  
      BackendReleaseTag:
        description: 'The S1000 backend tag that you would like to create a release. Ex: 1.3.0'     
        required: true    
      ChangelogComment:
        description: 'A sentence or short paragraph describing the important changes since the last packaging'
        required: true
      Stability:
        type: choice
        description: 'The stability of the built version (based on the amount of testing)'
        options:
          - unstable
          - testing
          - stable
          
env:
  QT_VERSION: '6.5.2'

jobs:
  build-and-push-image:
    runs-on: windows-latest
    
    permissions:
      contents: read
      packages: write
    steps:
      - name: Print Release Version
        run: |
          echo "Backend Release ${{ github.event.inputs.BackendReleaseTag }}"
          echo "Frontend Release ${{ github.event.inputs.FrontendReleaseTag }}"
    
      - name: Set Port
        run: |
          echo "Setting port environment variable"
          echo "port: $APP_Port" >> $GITHUB_ENV

      - name: Get 7-Zip
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          choco install 7zip

      - name: Get VS Code
        run: | 
          choco install visualstudio2022buildtools --package-parameters "--includeRecommended"
          choco install vscode

      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install Qt
        uses: jurplel/install-qt-action@v3.3.0
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          installDir: C:\Qt

      - name: Install Bitbucket SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.BITBUCKET_SSH_PRIVATE_KEY }}
          name: id_rsa_bit
          known_hosts: ${{ secrets.KNOWN_HOSTS_BITBUCKET }}
          config: |
            Host bitbucket-git
              HostName bitbucket.org
              IdentityFile ~/.ssh/id_rsa_bit
          if_key_exists: replace


      - name: Get WebsocketPP
        run: |
          git clone https://github.com/zaphoyd/websocketpp.git
          cd websocketpp
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX="C:/Program Files/websocketpp"
          cmake --build . --target install --config Release
          cd ..\..\..\..

      - name: Check out code
        uses: actions/checkout@v2

      - name: Download and Install pthreads
        run: |
          # Download the pthreads DLL from the official website
          Invoke-WebRequest -Uri https://sourceforge.net/projects/pthreads4w/files/pthreads-w32-2-11-1-release.zip/download -OutFile pthreads.zip
          Expand-Archive -Path pthreads.zip -DestinationPath pthreads
          # Copy the DLL to a system directory (adjust the path as needed)
          Copy-Item -Path "pthreads\Pre-built.2\*.*" -Destination "C:\Windows\System32\"
        shell: powershell

      - name: Install JACK
        run: |
          # Download the JACK installer from the official website
          Invoke-WebRequest -Uri https://github.com/jackaudio/jack2/releases/download/v1.9.19/Jack2_v1.9.19_64_setup.exe -OutFile jack_installer.exe
          # Run the installer silently
          Start-Process -FilePath jack_installer.exe -ArgumentList '/S' -Wait
          # Optional: Start the JACK server
          Start-Process -FilePath "C:\Program Files (x86)\Jack\jackd.exe" -ArgumentList '-dnone -r44100 -p1024 -n3 -Xseq'
        shell: powershell

      - name: Verify Installation
        run: |
          # Check pthreads installation
          Get-Command -Name pthreadVC3.dll
          # Check JACK installation (verify the version)
          "Jack Audio Connection Kit (version $(jackd --version))"
        shell: powershell

      - name: Get PortAudio
        run: |
          git clone https://github.com/PortAudio/portaudio.git
          cd portaudio
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX="C:/Program Files/portaudio"
          cmake --build .. --target install --config Release
          cd ..\..\..\..

      - name: Cache Boost Depends
        id: cache-boost
        uses: actions/cache@v2
        with:
          path: "C:\Program Files\boost"
          key: windows-boost-cache

      - if: ${{ steps.cache-boost.outputs.cache-hit != 'true' }}
        name: Get Boost
        run: |
          Invoke-WebRequest -OutFile boost.zip -Uri https://boostorg.jfrog.io/artifactory/main/release/1.80.0/source/boost_1_80_0.zip
          7z x boost.zip -o"C:\Program Files\boost\boost_1_80_0"
          cd "C:\Program Files\boost\boost_1_80_0\boost_1_80_0"
          .\bootstrap.bat
          .\b2.exe
          cd C:\Users\runneradmin

      - name: Retrieve Frontend Repository
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000_frontend.git
          cd s1000_frontend
          git checkout ${{ github.event.inputs.FrontendReleaseTag }}

      - name: Retrieve Backend Repository and build
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000_backend.git
          cd s1000_backend
          git checkout ${{ github.event.inputs.BackendReleaseTag }}
          cmake -DCMAKE_PREFIX_PATH="C:/Qt/6.5.2/msvc2019_64;C:/Program Files/portaudio/cmake/portaudio;C:/Program Files/websocketpp" -DBOOST_ROOT="C:/Program Files/boost/boost_1_80_0/boost_1_80_0" -DPORTAUDIO_ROOT="C:/
          cmake --build . --config Release
          cd ..

      - name: Retrieve Installer Repository
        run: |
          git clone git@bitbucket-git:thinkrfsoftware/s1000-installer.git     


      - name: Inno-setup
        shell: pwsh
        run: |
          Invoke-WebRequest -OutFile inno.exe -Uri https://jrsoftware.org/download.php/is.exe
          Start-Process -Wait -FilePath $PWD\inno.exe -Argument "/silent" -PassThru

      - name: Determine Inno Setup Script Path
        id: script-path
        run: |
          if [ "${{ github.event.inputs.InstallerType }}" == "browser" ]; then
            echo "::set-output name=path::installer/packaging/windows/web/inno-setup.iss"
          elif [ "${{ github.event.inputs.InstallerType }}" == "standalone" ]; then
            echo "::set-output name=path::installer/packaging/windows/standalone/inno-setup.iss"
          else
            echo "Invalid InstallerType specified."
            exit 1
          fi

      - name: Build Installer
        run: |
          # Navigate to the dynamically determined directory where your Inno Setup script is located
          cd ${{ steps.script-path.outputs.path }}
          
          # Build the installer using the provided .iss script
          iscc /Q /O"$OUTPUT_DIRECTORY" "inno-setup.iss"

      - name: Upload Installer
        uses: actions/upload-artifact@v2
        with:
          name: installer
          path: $OUTPUT_DIRECTORY